/*
 *     Copyright 2024 The CNAI Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by mockery v2.46.3. DO NOT EDIT.

package backend

import (
	context "context"

	backend "github.com/CloudNativeAI/modctl/pkg/backend"

	mock "github.com/stretchr/testify/mock"
)

// Backend is an autogenerated mock type for the Backend type
type Backend struct {
	mock.Mock
}

type Backend_Expecter struct {
	mock *mock.Mock
}

func (_m *Backend) EXPECT() *Backend_Expecter {
	return &Backend_Expecter{mock: &_m.Mock}
}

// Build provides a mock function with given fields: ctx, modelfilePath, workDir, target
func (_m *Backend) Build(ctx context.Context, modelfilePath string, workDir string, target string) error {
	ret := _m.Called(ctx, modelfilePath, workDir, target)

	if len(ret) == 0 {
		panic("no return value specified for Build")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, modelfilePath, workDir, target)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Backend_Build_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Build'
type Backend_Build_Call struct {
	*mock.Call
}

// Build is a helper method to define mock.On call
//   - ctx context.Context
//   - modelfilePath string
//   - workDir string
//   - target string
func (_e *Backend_Expecter) Build(ctx interface{}, modelfilePath interface{}, workDir interface{}, target interface{}) *Backend_Build_Call {
	return &Backend_Build_Call{Call: _e.mock.On("Build", ctx, modelfilePath, workDir, target)}
}

func (_c *Backend_Build_Call) Run(run func(ctx context.Context, modelfilePath string, workDir string, target string)) *Backend_Build_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *Backend_Build_Call) Return(_a0 error) *Backend_Build_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backend_Build_Call) RunAndReturn(run func(context.Context, string, string, string) error) *Backend_Build_Call {
	_c.Call.Return(run)
	return _c
}

// Inspect provides a mock function with given fields: ctx, target
func (_m *Backend) Inspect(ctx context.Context, target string) (*backend.InspectedModelArtifact, error) {
	ret := _m.Called(ctx, target)

	if len(ret) == 0 {
		panic("no return value specified for Inspect")
	}

	var r0 *backend.InspectedModelArtifact
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*backend.InspectedModelArtifact, error)); ok {
		return rf(ctx, target)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *backend.InspectedModelArtifact); ok {
		r0 = rf(ctx, target)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backend.InspectedModelArtifact)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, target)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Backend_Inspect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Inspect'
type Backend_Inspect_Call struct {
	*mock.Call
}

// Inspect is a helper method to define mock.On call
//   - ctx context.Context
//   - target string
func (_e *Backend_Expecter) Inspect(ctx interface{}, target interface{}) *Backend_Inspect_Call {
	return &Backend_Inspect_Call{Call: _e.mock.On("Inspect", ctx, target)}
}

func (_c *Backend_Inspect_Call) Run(run func(ctx context.Context, target string)) *Backend_Inspect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Backend_Inspect_Call) Return(_a0 *backend.InspectedModelArtifact, _a1 error) *Backend_Inspect_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Backend_Inspect_Call) RunAndReturn(run func(context.Context, string) (*backend.InspectedModelArtifact, error)) *Backend_Inspect_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *Backend) List(ctx context.Context) ([]*backend.ModelArtifact, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*backend.ModelArtifact
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*backend.ModelArtifact, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*backend.ModelArtifact); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*backend.ModelArtifact)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Backend_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type Backend_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Backend_Expecter) List(ctx interface{}) *Backend_List_Call {
	return &Backend_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *Backend_List_Call) Run(run func(ctx context.Context)) *Backend_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Backend_List_Call) Return(_a0 []*backend.ModelArtifact, _a1 error) *Backend_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Backend_List_Call) RunAndReturn(run func(context.Context) ([]*backend.ModelArtifact, error)) *Backend_List_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: ctx, registry, username, password, opts
func (_m *Backend) Login(ctx context.Context, registry string, username string, password string, opts ...backend.Option) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, registry, username, password)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...backend.Option) error); ok {
		r0 = rf(ctx, registry, username, password, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Backend_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type Backend_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - registry string
//   - username string
//   - password string
//   - opts ...backend.Option
func (_e *Backend_Expecter) Login(ctx interface{}, registry interface{}, username interface{}, password interface{}, opts ...interface{}) *Backend_Login_Call {
	return &Backend_Login_Call{Call: _e.mock.On("Login",
		append([]interface{}{ctx, registry, username, password}, opts...)...)}
}

func (_c *Backend_Login_Call) Run(run func(ctx context.Context, registry string, username string, password string, opts ...backend.Option)) *Backend_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]backend.Option, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(backend.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), variadicArgs...)
	})
	return _c
}

func (_c *Backend_Login_Call) Return(_a0 error) *Backend_Login_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backend_Login_Call) RunAndReturn(run func(context.Context, string, string, string, ...backend.Option) error) *Backend_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function with given fields: ctx, registry
func (_m *Backend) Logout(ctx context.Context, registry string) error {
	ret := _m.Called(ctx, registry)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, registry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Backend_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type Backend_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - ctx context.Context
//   - registry string
func (_e *Backend_Expecter) Logout(ctx interface{}, registry interface{}) *Backend_Logout_Call {
	return &Backend_Logout_Call{Call: _e.mock.On("Logout", ctx, registry)}
}

func (_c *Backend_Logout_Call) Run(run func(ctx context.Context, registry string)) *Backend_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Backend_Logout_Call) Return(_a0 error) *Backend_Logout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backend_Logout_Call) RunAndReturn(run func(context.Context, string) error) *Backend_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// Prune provides a mock function with given fields: ctx, dryRun, removeUntagged
func (_m *Backend) Prune(ctx context.Context, dryRun bool, removeUntagged bool) error {
	ret := _m.Called(ctx, dryRun, removeUntagged)

	if len(ret) == 0 {
		panic("no return value specified for Prune")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, bool, bool) error); ok {
		r0 = rf(ctx, dryRun, removeUntagged)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Backend_Prune_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Prune'
type Backend_Prune_Call struct {
	*mock.Call
}

// Prune is a helper method to define mock.On call
//   - ctx context.Context
//   - dryRun bool
//   - removeUntagged bool
func (_e *Backend_Expecter) Prune(ctx interface{}, dryRun interface{}, removeUntagged interface{}) *Backend_Prune_Call {
	return &Backend_Prune_Call{Call: _e.mock.On("Prune", ctx, dryRun, removeUntagged)}
}

func (_c *Backend_Prune_Call) Run(run func(ctx context.Context, dryRun bool, removeUntagged bool)) *Backend_Prune_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bool), args[2].(bool))
	})
	return _c
}

func (_c *Backend_Prune_Call) Return(_a0 error) *Backend_Prune_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backend_Prune_Call) RunAndReturn(run func(context.Context, bool, bool) error) *Backend_Prune_Call {
	_c.Call.Return(run)
	return _c
}

// Pull provides a mock function with given fields: ctx, target, opts
func (_m *Backend) Pull(ctx context.Context, target string, opts ...backend.Option) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, target)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Pull")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...backend.Option) error); ok {
		r0 = rf(ctx, target, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Backend_Pull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pull'
type Backend_Pull_Call struct {
	*mock.Call
}

// Pull is a helper method to define mock.On call
//   - ctx context.Context
//   - target string
//   - opts ...backend.Option
func (_e *Backend_Expecter) Pull(ctx interface{}, target interface{}, opts ...interface{}) *Backend_Pull_Call {
	return &Backend_Pull_Call{Call: _e.mock.On("Pull",
		append([]interface{}{ctx, target}, opts...)...)}
}

func (_c *Backend_Pull_Call) Run(run func(ctx context.Context, target string, opts ...backend.Option)) *Backend_Pull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]backend.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(backend.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Backend_Pull_Call) Return(_a0 error) *Backend_Pull_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backend_Pull_Call) RunAndReturn(run func(context.Context, string, ...backend.Option) error) *Backend_Pull_Call {
	_c.Call.Return(run)
	return _c
}

// Push provides a mock function with given fields: ctx, target, opts
func (_m *Backend) Push(ctx context.Context, target string, opts ...backend.Option) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, target)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Push")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...backend.Option) error); ok {
		r0 = rf(ctx, target, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Backend_Push_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Push'
type Backend_Push_Call struct {
	*mock.Call
}

// Push is a helper method to define mock.On call
//   - ctx context.Context
//   - target string
//   - opts ...backend.Option
func (_e *Backend_Expecter) Push(ctx interface{}, target interface{}, opts ...interface{}) *Backend_Push_Call {
	return &Backend_Push_Call{Call: _e.mock.On("Push",
		append([]interface{}{ctx, target}, opts...)...)}
}

func (_c *Backend_Push_Call) Run(run func(ctx context.Context, target string, opts ...backend.Option)) *Backend_Push_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]backend.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(backend.Option)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Backend_Push_Call) Return(_a0 error) *Backend_Push_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backend_Push_Call) RunAndReturn(run func(context.Context, string, ...backend.Option) error) *Backend_Push_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: ctx, target
func (_m *Backend) Remove(ctx context.Context, target string) (string, error) {
	ret := _m.Called(ctx, target)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, target)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, target)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, target)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Backend_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type Backend_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - ctx context.Context
//   - target string
func (_e *Backend_Expecter) Remove(ctx interface{}, target interface{}) *Backend_Remove_Call {
	return &Backend_Remove_Call{Call: _e.mock.On("Remove", ctx, target)}
}

func (_c *Backend_Remove_Call) Run(run func(ctx context.Context, target string)) *Backend_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Backend_Remove_Call) Return(_a0 string, _a1 error) *Backend_Remove_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Backend_Remove_Call) RunAndReturn(run func(context.Context, string) (string, error)) *Backend_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// NewBackend creates a new instance of Backend. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBackend(t interface {
	mock.TestingT
	Cleanup(func())
}) *Backend {
	mock := &Backend{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
