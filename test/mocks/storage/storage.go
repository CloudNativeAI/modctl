/*
 *     Copyright 2024 The CNAI Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by mockery v2.52.1. DO NOT EDIT.

package storage

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

type Storage_Expecter struct {
	mock *mock.Mock
}

func (_m *Storage) EXPECT() *Storage_Expecter {
	return &Storage_Expecter{mock: &_m.Mock}
}

// DeleteManifest provides a mock function with given fields: ctx, repo, reference
func (_m *Storage) DeleteManifest(ctx context.Context, repo string, reference string) error {
	ret := _m.Called(ctx, repo, reference)

	if len(ret) == 0 {
		panic("no return value specified for DeleteManifest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, repo, reference)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_DeleteManifest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteManifest'
type Storage_DeleteManifest_Call struct {
	*mock.Call
}

// DeleteManifest is a helper method to define mock.On call
//   - ctx context.Context
//   - repo string
//   - reference string
func (_e *Storage_Expecter) DeleteManifest(ctx interface{}, repo interface{}, reference interface{}) *Storage_DeleteManifest_Call {
	return &Storage_DeleteManifest_Call{Call: _e.mock.On("DeleteManifest", ctx, repo, reference)}
}

func (_c *Storage_DeleteManifest_Call) Run(run func(ctx context.Context, repo string, reference string)) *Storage_DeleteManifest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Storage_DeleteManifest_Call) Return(_a0 error) *Storage_DeleteManifest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_DeleteManifest_Call) RunAndReturn(run func(context.Context, string, string) error) *Storage_DeleteManifest_Call {
	_c.Call.Return(run)
	return _c
}

// ListRepositories provides a mock function with given fields: ctx
func (_m *Storage) ListRepositories(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListRepositories")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_ListRepositories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRepositories'
type Storage_ListRepositories_Call struct {
	*mock.Call
}

// ListRepositories is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Storage_Expecter) ListRepositories(ctx interface{}) *Storage_ListRepositories_Call {
	return &Storage_ListRepositories_Call{Call: _e.mock.On("ListRepositories", ctx)}
}

func (_c *Storage_ListRepositories_Call) Run(run func(ctx context.Context)) *Storage_ListRepositories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Storage_ListRepositories_Call) Return(_a0 []string, _a1 error) *Storage_ListRepositories_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_ListRepositories_Call) RunAndReturn(run func(context.Context) ([]string, error)) *Storage_ListRepositories_Call {
	_c.Call.Return(run)
	return _c
}

// ListTags provides a mock function with given fields: ctx, repo
func (_m *Storage) ListTags(ctx context.Context, repo string) ([]string, error) {
	ret := _m.Called(ctx, repo)

	if len(ret) == 0 {
		panic("no return value specified for ListTags")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, repo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, repo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, repo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_ListTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTags'
type Storage_ListTags_Call struct {
	*mock.Call
}

// ListTags is a helper method to define mock.On call
//   - ctx context.Context
//   - repo string
func (_e *Storage_Expecter) ListTags(ctx interface{}, repo interface{}) *Storage_ListTags_Call {
	return &Storage_ListTags_Call{Call: _e.mock.On("ListTags", ctx, repo)}
}

func (_c *Storage_ListTags_Call) Run(run func(ctx context.Context, repo string)) *Storage_ListTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Storage_ListTags_Call) Return(_a0 []string, _a1 error) *Storage_ListTags_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_ListTags_Call) RunAndReturn(run func(context.Context, string) ([]string, error)) *Storage_ListTags_Call {
	_c.Call.Return(run)
	return _c
}

// PerformGC provides a mock function with given fields: ctx, dryRun, removeUntagged
func (_m *Storage) PerformGC(ctx context.Context, dryRun bool, removeUntagged bool) error {
	ret := _m.Called(ctx, dryRun, removeUntagged)

	if len(ret) == 0 {
		panic("no return value specified for PerformGC")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, bool, bool) error); ok {
		r0 = rf(ctx, dryRun, removeUntagged)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_PerformGC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PerformGC'
type Storage_PerformGC_Call struct {
	*mock.Call
}

// PerformGC is a helper method to define mock.On call
//   - ctx context.Context
//   - dryRun bool
//   - removeUntagged bool
func (_e *Storage_Expecter) PerformGC(ctx interface{}, dryRun interface{}, removeUntagged interface{}) *Storage_PerformGC_Call {
	return &Storage_PerformGC_Call{Call: _e.mock.On("PerformGC", ctx, dryRun, removeUntagged)}
}

func (_c *Storage_PerformGC_Call) Run(run func(ctx context.Context, dryRun bool, removeUntagged bool)) *Storage_PerformGC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bool), args[2].(bool))
	})
	return _c
}

func (_c *Storage_PerformGC_Call) Return(_a0 error) *Storage_PerformGC_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_PerformGC_Call) RunAndReturn(run func(context.Context, bool, bool) error) *Storage_PerformGC_Call {
	_c.Call.Return(run)
	return _c
}

// PullBlob provides a mock function with given fields: ctx, repo, digest
func (_m *Storage) PullBlob(ctx context.Context, repo string, digest string) (io.ReadCloser, error) {
	ret := _m.Called(ctx, repo, digest)

	if len(ret) == 0 {
		panic("no return value specified for PullBlob")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (io.ReadCloser, error)); ok {
		return rf(ctx, repo, digest)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) io.ReadCloser); ok {
		r0 = rf(ctx, repo, digest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, repo, digest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_PullBlob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PullBlob'
type Storage_PullBlob_Call struct {
	*mock.Call
}

// PullBlob is a helper method to define mock.On call
//   - ctx context.Context
//   - repo string
//   - digest string
func (_e *Storage_Expecter) PullBlob(ctx interface{}, repo interface{}, digest interface{}) *Storage_PullBlob_Call {
	return &Storage_PullBlob_Call{Call: _e.mock.On("PullBlob", ctx, repo, digest)}
}

func (_c *Storage_PullBlob_Call) Run(run func(ctx context.Context, repo string, digest string)) *Storage_PullBlob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Storage_PullBlob_Call) Return(_a0 io.ReadCloser, _a1 error) *Storage_PullBlob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_PullBlob_Call) RunAndReturn(run func(context.Context, string, string) (io.ReadCloser, error)) *Storage_PullBlob_Call {
	_c.Call.Return(run)
	return _c
}

// PullManifest provides a mock function with given fields: ctx, repo, reference
func (_m *Storage) PullManifest(ctx context.Context, repo string, reference string) ([]byte, string, error) {
	ret := _m.Called(ctx, repo, reference)

	if len(ret) == 0 {
		panic("no return value specified for PullManifest")
	}

	var r0 []byte
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]byte, string, error)); ok {
		return rf(ctx, repo, reference)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []byte); ok {
		r0 = rf(ctx, repo, reference)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) string); ok {
		r1 = rf(ctx, repo, reference)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, repo, reference)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Storage_PullManifest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PullManifest'
type Storage_PullManifest_Call struct {
	*mock.Call
}

// PullManifest is a helper method to define mock.On call
//   - ctx context.Context
//   - repo string
//   - reference string
func (_e *Storage_Expecter) PullManifest(ctx interface{}, repo interface{}, reference interface{}) *Storage_PullManifest_Call {
	return &Storage_PullManifest_Call{Call: _e.mock.On("PullManifest", ctx, repo, reference)}
}

func (_c *Storage_PullManifest_Call) Run(run func(ctx context.Context, repo string, reference string)) *Storage_PullManifest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Storage_PullManifest_Call) Return(_a0 []byte, _a1 string, _a2 error) *Storage_PullManifest_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *Storage_PullManifest_Call) RunAndReturn(run func(context.Context, string, string) ([]byte, string, error)) *Storage_PullManifest_Call {
	_c.Call.Return(run)
	return _c
}

// PushBlob provides a mock function with given fields: ctx, repo, body
func (_m *Storage) PushBlob(ctx context.Context, repo string, body io.Reader) (string, int64, error) {
	ret := _m.Called(ctx, repo, body)

	if len(ret) == 0 {
		panic("no return value specified for PushBlob")
	}

	var r0 string
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader) (string, int64, error)); ok {
		return rf(ctx, repo, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader) string); ok {
		r0 = rf(ctx, repo, body)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader) int64); ok {
		r1 = rf(ctx, repo, body)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, io.Reader) error); ok {
		r2 = rf(ctx, repo, body)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Storage_PushBlob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PushBlob'
type Storage_PushBlob_Call struct {
	*mock.Call
}

// PushBlob is a helper method to define mock.On call
//   - ctx context.Context
//   - repo string
//   - body io.Reader
func (_e *Storage_Expecter) PushBlob(ctx interface{}, repo interface{}, body interface{}) *Storage_PushBlob_Call {
	return &Storage_PushBlob_Call{Call: _e.mock.On("PushBlob", ctx, repo, body)}
}

func (_c *Storage_PushBlob_Call) Run(run func(ctx context.Context, repo string, body io.Reader)) *Storage_PushBlob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader))
	})
	return _c
}

func (_c *Storage_PushBlob_Call) Return(_a0 string, _a1 int64, _a2 error) *Storage_PushBlob_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *Storage_PushBlob_Call) RunAndReturn(run func(context.Context, string, io.Reader) (string, int64, error)) *Storage_PushBlob_Call {
	_c.Call.Return(run)
	return _c
}

// PushManifest provides a mock function with given fields: ctx, repo, reference, body
func (_m *Storage) PushManifest(ctx context.Context, repo string, reference string, body []byte) (string, error) {
	ret := _m.Called(ctx, repo, reference, body)

	if len(ret) == 0 {
		panic("no return value specified for PushManifest")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []byte) (string, error)); ok {
		return rf(ctx, repo, reference, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []byte) string); ok {
		r0 = rf(ctx, repo, reference, body)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []byte) error); ok {
		r1 = rf(ctx, repo, reference, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_PushManifest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PushManifest'
type Storage_PushManifest_Call struct {
	*mock.Call
}

// PushManifest is a helper method to define mock.On call
//   - ctx context.Context
//   - repo string
//   - reference string
//   - body []byte
func (_e *Storage_Expecter) PushManifest(ctx interface{}, repo interface{}, reference interface{}, body interface{}) *Storage_PushManifest_Call {
	return &Storage_PushManifest_Call{Call: _e.mock.On("PushManifest", ctx, repo, reference, body)}
}

func (_c *Storage_PushManifest_Call) Run(run func(ctx context.Context, repo string, reference string, body []byte)) *Storage_PushManifest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]byte))
	})
	return _c
}

func (_c *Storage_PushManifest_Call) Return(_a0 string, _a1 error) *Storage_PushManifest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_PushManifest_Call) RunAndReturn(run func(context.Context, string, string, []byte) (string, error)) *Storage_PushManifest_Call {
	_c.Call.Return(run)
	return _c
}

// StatBlob provides a mock function with given fields: ctx, repo, digest
func (_m *Storage) StatBlob(ctx context.Context, repo string, digest string) (bool, error) {
	ret := _m.Called(ctx, repo, digest)

	if len(ret) == 0 {
		panic("no return value specified for StatBlob")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, repo, digest)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, repo, digest)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, repo, digest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_StatBlob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StatBlob'
type Storage_StatBlob_Call struct {
	*mock.Call
}

// StatBlob is a helper method to define mock.On call
//   - ctx context.Context
//   - repo string
//   - digest string
func (_e *Storage_Expecter) StatBlob(ctx interface{}, repo interface{}, digest interface{}) *Storage_StatBlob_Call {
	return &Storage_StatBlob_Call{Call: _e.mock.On("StatBlob", ctx, repo, digest)}
}

func (_c *Storage_StatBlob_Call) Run(run func(ctx context.Context, repo string, digest string)) *Storage_StatBlob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Storage_StatBlob_Call) Return(_a0 bool, _a1 error) *Storage_StatBlob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_StatBlob_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *Storage_StatBlob_Call {
	_c.Call.Return(run)
	return _c
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
